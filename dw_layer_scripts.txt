create or replace TABLE CUSTOMER_DIM (
    customer_key int identity(1,1),
	CUSTOMER_ID NUMBER(38,0),
	CUSTOMER_NAME VARCHAR(255),
	USERNAME VARCHAR(255),
	SEGMENT VARCHAR(255),
	POSTAL_CODE VARCHAR(20),
	CITY VARCHAR(255),
	STATE VARCHAR(255),
	REGION VARCHAR(255),
	COUNTRY VARCHAR(255)
);


--first load 
insert into CUSTOMER_DIM(CUSTOMER_ID, CUSTOMER_NAME, USERNAME, SEGMENT, POSTAL_CODE, CITY, STATE, REGION, COUNTRY)
select * from stg.stg_customers;


---incremantal load 
--update query 
update CUSTOMER_DIM
set segment = stg_customers.segment , postal_code = stg_customers.postal_code
from stg.stg_customers
where stg_customers.customer_id=customer_dim.customer_id


--insert query
insert into CUSTOMER_DIM(CUSTOMER_ID, CUSTOMER_NAME, USERNAME, SEGMENT, POSTAL_CODE, CITY, STATE, REGION, COUNTRY)
select * from stg.stg_customers
where customer_id not in (select customer_id from CUSTOMER_DIM)

--select * from customer_dim where customer_id=1

create or replace TABLE PRODUCT_DIM (
    product_key int identity (1,1),
	PRODUCT_ID NUMBER(38,0),
	PRODUCT_NAME VARCHAR(255),
	PRICE NUMBER(6,2),
	SUB_CATEGORY VARCHAR(255),
	CATEGORY VARCHAR(255),
    effective_date date ,
    end_date date
);

--first load 
insert into PRODUCT_DIM (PRODUCT_ID, PRODUCT_NAME, PRICE, SUB_CATEGORY, CATEGORY, EFFECTIVE_DATE, END_DATE)
select * , current_date-1 as  effective_date ,'9999-12-31'::date  as end_date from stg.stg_products

select * from product_dim
select * from stg.stg_products

--incremental laod 
update PRODUCT_DIM
set end_date = current_date
from stg.stg_products 
where PRODUCT_DIM.product_id=stg_products.product_id and product_dim.end_date='9999-12-31';

insert into PRODUCT_DIM (PRODUCT_ID, PRODUCT_NAME, PRICE, SUB_CATEGORY, CATEGORY, EFFECTIVE_DATE, END_DATE)
select * , current_date+1 as  effective_date ,'9999-12-31'::date  as end_date from stg.stg_products

select * from product_dim where product_id in (1,1871)

create or replace TABLE fct_ORDERS (
	ORDER_ID NUMBER(38,0),
	ORDER_NUMBER VARCHAR(255),
	ORDER_DATE DATE,
	CUSTOMER_KEY NUMBER(38,0),
	DISCOUNT NUMBER(6,2),
	PRODUCT_KEY NUMBER(38,0),
	QUANTITY NUMBER(38,0),
	SALES NUMBER(8,2)
);

insert into fct_ORDERS
select o.ORDER_ID, o.ORDER_NUMBER, o.ORDER_DATE, cd.CUSTOMER_KEY, o.DISCOUNT, pd.PRODUCT_KEY, o.QUANTITY, o.SALES
from stg.stg_orders o
inner join dw.product_dim pd on pd.product_id=o.product_id and pd.end_date='9999-12-31'
inner join dw.customer_dim cd on cd.customer_id=o.customer_id


select * from fct_ORDERS


select * from product_dim;
select p.category,sum(f.sales) as total_sales
from fct_orders f
inner join product_dim p on f.product_key=p.product_key
group by p.category;

insert into calendar_dim 
with recursive  cte as (
select '2000-01-01'::date as cal_date
union all
select cal_date+1 as cal_date
from cte
where cal_date+1<='2050-12-31'
)
select cal_date , year(cal_date) as cal_year,month(cal_date) as cal_month  from cte


create or replace table calendar_dim 
(
cal_date date,
cal_year varchar(4),
cal_month varchar(2)
)

select * from calendar_dim

select year(order_date) as year_order, sum(sales)
from fct_orders
group by year(order_date)

select c.cal_year , sum(f.sales)
from fct_orders f
inner join calendar_dim c on f.order_date=c.cal_date
group by c.cal_year;





